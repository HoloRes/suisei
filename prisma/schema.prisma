//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// connection.prisma
//

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

//
// core.prisma
//

// This file holds the core database models required to run the bot

model Server {
  id               String   @id
  prefix           String?
  disabledCommands String[]
  updateChannel    String?
  staffRole        String?
  adminRole        String?
}

//
// moderation.prisma
//

model ModerationUser {
  id           String                     @id
  lastKnownTag String
  notes        Note[]
  log          ModerationLogItem[]
  pendingLog   ModerationPendingLogItem[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  note    String
  guildId String

  user   ModerationUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

enum ModerationType {
  WARN
  MUTE
  KICK
  BAN
}

model ModerationLogItem {
  id        BigInt         @id @default(autoincrement())
  type      ModerationType
  moderator String
  reason    String
  date      DateTime       @default(now())
  duration  BigInt?
  guildId   String

  user   ModerationUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model ModerationPendingLogItem {
  id        String         @id @default(cuid())
  type      ModerationType
  moderator String
  reason    String
  duration  BigInt?
  guildId   String
  silent    Boolean?

  user   ModerationUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

//
// youtube.prisma
//

model YoutubeChannel {
  id          String  @id
  name        String
  englishName String?
  photo       String?
  org         String?
  subOrg      String?

  subscriptions Subscription[]
}

model Subscription {
  // Discord channel id
  id      String
  message String

  // YouTube channel id
  channelId String
  channel   YoutubeChannel @relation(fields: [channelId], references: [id])

  @@id([id, channelId])
}

model QuerySubscription {
  id      String @id
  message String

  includedOrgs    String[]
  excludedOrgs    String[]
  includedSubOrgs String[]
  excludedSubOrgs String[]
  includedVtubers String[]
  excludedVtubers String[]
}

model Livestream {
  id    String @id
  title String

  messageIds String[]
}

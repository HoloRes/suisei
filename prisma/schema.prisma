//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// connection.prisma
//

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

//
// core.prisma
//

// This file holds the core database models required to run the bot

model Server {
  id               String   @id
  prefix           String?
  disabledCommands String[]
  updateChannel    String?
  staffRole        String?
  adminRole        String?
}

model ConfigValue {
  guildId String
  module  String
  key     String
  value   String

  @@id([guildId, module, key])
}

model ScheduledTask {
  module String
  task   String
  query  String
  jobId  String

  @@id([module, task, query])
}

//
// moderation.prisma
//

model ModerationUser {
  id           String                     @id
  lastKnownTag String
  notes        Note[]
  log          ModerationLogItem[]
  pendingLog   ModerationPendingLogItem[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  note    String
  guildId String

  user   ModerationUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

enum ModerationType {
  CROSSREPORT
  AUTOMOD
  STRIKE
  MANUAL
  APPEAL
}

enum ModerationAction {
  WARN
  MUTE
  KICK
  BAN
  UNMUTE
  UNBAN
  REVOKE
}

model ModerationLogItem {
  id             Int                @id @default(sequence(start: 1))
  type           ModerationType
  action         ModerationAction
  moderatorId    String
  reason         String
  date           DateTime           @default(now())
  duration       Int?
  strikes        Int?
  strikeDate     DateTime           @default(now())
  affectedCaseId Int?
  affectedCase   ModerationLogItem? @relation("affects", fields: [affectedCaseId], references: [id], onDelete: Cascade)
  guildId        String

  offender   ModerationUser @relation(fields: [offenderId], references: [id], onDelete: Cascade)
  offenderId String

  ActiveMute ActiveMute?
  affectedBy ModerationLogItem[] @relation("affects")
}

model Massban {
  id          Int      @id @default(sequence(start: 1))
  guildId     String
  moderatorId String
  reason      String
  date        DateTime @default(now())
  offenders   String[]
}

model ModerationPendingLogItem {
  id          String           @id @default(cuid())
  type        ModerationType
  action      ModerationAction
  moderatorId String
  reason      String
  duration    Int?
  silent      Boolean?
  hardMute    Boolean?
  strikes     Int?
  guildId     String
  messageId   String
  channelId   String

  offender   ModerationUser @relation(fields: [offenderId], references: [id], onDelete: Cascade)
  offenderId String
}

model StrikeAction {
  id       String           @id @default(cuid())
  action   ModerationAction
  duration Int?

  config   ModerationGuildConfig @relation(fields: [configId], references: [guildId], onDelete: Cascade)
  configId String
}

model ModerationGuildConfig {
  guildId            String         @id
  strikes            StrikeAction[]
  muteRole           String
  logChannel         String
  publicLogChannel   String?
  strikeExpiresAfter Int
}

model ActiveMute {
  userId     String
  guildId    String
  logItem    ModerationLogItem @relation(fields: [logItemId], references: [id])
  logItemId  Int               @unique
  hardMute   HardMute?         @relation(fields: [hardMuteId], references: [id])
  hardMuteId String?           @unique

  @@id([userId, guildId])
}

model HardMute {
  id         String      @id @default(cuid())
  knownRoles String[]
  ActiveMute ActiveMute?
}

//
// twitter.prisma
//

model TwitterShare {
  id             String   @id
  date           DateTime
  sharedByUserId String
}

model TwitterLeaderboardUser {
  id              String @id
  totalShares     Int    @default(0)
  sharesThisMonth Int    @default(0)
}

model TwitterSubscription {
  handle    String
  channelId String

  message String?

  @@id([handle, channelId])
}

model TwitterBlacklist {
  id String @id
}

//
// youtube.prisma
//

model YoutubeChannel {
  id          String  @id
  name        String
  englishName String?
  photo       String?
  org         String?
  subOrg      String?

  subscriptions Subscription[]
}

model Subscription {
  // Discord channel id
  id      String
  message String

  // YouTube channel id
  channelId String
  channel   YoutubeChannel @relation(fields: [channelId], references: [id])

  @@id([id, channelId])
}

model QuerySubscription {
  id      String @id
  message String

  includedOrgs    String[]
  excludedOrgs    String[]
  includedSubOrgs String[]
  excludedSubOrgs String[]
  includedVtubers String[]
  excludedVtubers String[]
}

model Livestream {
  id    String @id
  title String

  messageIds String[]
}

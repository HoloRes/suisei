model ModerationUser {
    id           String                     @id
    lastKnownTag String
    notes        Note[]
    log          ModerationLogItem[]
    pendingLog   ModerationPendingLogItem[]
}

model Note {
    id      Int      @id @default(sequence(start: 1))
    note    String
    guildId String
    date    DateTime @default(now())

    user   ModerationUser @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

enum ModerationType {
    CROSSREPORT
    AUTOMOD
    STRIKE
    MANUAL
    APPEAL
}

enum ModerationAction {
    WARN
    MUTE
    KICK
    BAN
    UNMUTE
    UNBAN
    REVOKE
}

model ModerationLogItem {
    id             Int                @id @default(sequence(start: 1))
    type           ModerationType
    action         ModerationAction
    moderatorId    String
    reason         String
    date           DateTime           @default(now())
    duration       Int?
    strikes        Int?
    strikeDate     DateTime           @default(now())
    affectedCaseId Int?
    affectedCase   ModerationLogItem? @relation("affects", fields: [affectedCaseId], references: [id], onDelete: Cascade)
    guildId        String

    offender   ModerationUser @relation(fields: [offenderId], references: [id], onDelete: Cascade)
    offenderId String

    ActiveMute        ActiveMute?
    affectedBy        ModerationLogItem[]        @relation("affects")
    affectedByPending ModerationPendingLogItem[]
}

model Massban {
    id          Int      @id @default(sequence(start: 1))
    guildId     String
    moderatorId String
    reason      String
    date        DateTime @default(now())
    offenders   String[]
}

model ModerationPendingLogItem {
    id             String             @id @default(cuid())
    type           ModerationType
    action         ModerationAction
    moderatorId    String
    reason         String
    duration       Int?
    purgeDuration  Int?
    silent         Boolean?
    hardMute       Boolean?
    strikes        Int?
    guildId        String
    messageId      String
    channelId      String
    affectedCaseId Int?
    affectedCase   ModerationLogItem? @relation(fields: [affectedCaseId], references: [id], onDelete: Cascade)

    offender   ModerationUser @relation(fields: [offenderId], references: [id], onDelete: Cascade)
    offenderId String
}

model ModerationGuildConfig {
    guildId            String  @id
    strikes            Json    @default("[]")
    muteRole           String
    logChannel         String
    publicLogChannel   String?
    strikeExpiresAfter Int
}

model ActiveMute {
    userId     String
    guildId    String
    logItem    ModerationLogItem @relation(fields: [logItemId], references: [id])
    logItemId  Int               @unique
    hardMute   HardMute?         @relation(fields: [hardMuteId], references: [id])
    hardMuteId String?           @unique

    @@id([userId, guildId])
}

model HardMute {
    id         String      @id @default(cuid())
    knownRoles String[]
    ActiveMute ActiveMute?
}

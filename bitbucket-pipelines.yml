image: node:lts-buster

pipelines:
  default:
    - parallel:
        - step:
            name: Mirror to GitHub
            script:
              - git push --mirror git@github.com:HoloRes/suisei-bot.git

        - step:
            name: Code linting
            script:
              - curl -f https://get.pnpm.io/v6.js | node - add --global pnpm@6
              - pnpm install -D
              - pnpm run lint:ci
              - python .bitbucket/parse.py
              - 'curl --request PUT --proxy "http://localhost:29418" "https://api.bitbucket.org/2.0/repositories/${BITBUCKET_REPO_FULL_NAME}/commit/${BITBUCKET_COMMIT}/reports/eslint" --header "Content-Type: application/json" -d @report.json'
              - 'curl --request delete --proxy "http://localhost:29418" "https://api.bitbucket.org/2.0/repositories/${BITBUCKET_REPO_FULL_NAME}/commit/${BITBUCKET_COMMIT}/reports/eslint/annotations/eslint-annotation"'
              - 'curl --request PUT --proxy "http://localhost:29418" "https://api.bitbucket.org/2.0/repositories/${BITBUCKET_REPO_FULL_NAME}/commit/${BITBUCKET_COMMIT}/reports/eslint/annotations/eslint-annotation" --header "Content-Type: application/json" -d @annotations.json'
            caches:
              - pnpm

        - step:
            name: Scan using Snyk
            script:
              - npm install -g snyk # binary download also available
              - snyk test --all-projects --json > snyk-test-output.json
              - pipe: snyk/snyk-scan:0.4.6
                variables:
                  SNYK_TOKEN: $SNYK_TOKEN
                  SNYK_TEST_JSON_INPUT: "snyk-test-output.json"

        - step:
            name: Build
            script:
              - IMAGE_NAME=$BITBUCKET_REPO_SLUG
              - REPO_URL=$BITBUCKET_GIT_HTTP_ORIGIN
              - docker build . --file Dockerfile --tag ${IMAGE_NAME}
                --label "org.opencontainers.image.url"="${REPO_URL}"
                --label "org.opencontainers.image.source"="${REPO_URL}"
                --label "org.opencontainers.image.title"="${BITBUCKET_REPO_SLUG}"
                --label "org.opencontainers.image.licenses"="MIT"
                --label "org.opencontainers.image.description"="A Discord bot specifically built for VTuber servers"
                --label "org.opencontainers.image.revision"="${BITBUCKET_COMMIT}"
                --label "org.opencontainers.image.version"="${BITBUCKET_BRANCH}"
              - docker save ${IMAGE_NAME} --output "${IMAGE_NAME}.tar"
            services:
              - docker
            caches:
              - docker
            artifacts:
              - "*.tar"

        - step:
            name: Lint the Dockerfile
            image: hadolint/hadolint:latest-debian
            script:
              - hadolint Dockerfile

    - step:
        script:
          - IMAGE_NAME=$BITBUCKET_REPO_SLUG
          - docker load --input "${IMAGE_NAME}.tar"
          - VERSION=$(echo $BITBUCKET_COMMIT | cut -c1-7)
          - pipe: anchore/anchore-scan:0.2.14
            variables:
              IMAGE_NAME: "${IMAGE_NAME}:${VERSION}"


  pull-requests:
    master:
      - step:
          name: Create Sentry release
          script:
            - pipe: holores/sentry-new-release:0.4.0
              variables:
                SENTRY_AUTH_TOKEN: $SENTRY_TOKEN
                SENTRY_ORG: $SENTRY_ORG
                SENTRY_URL: $SENTRY_URL
                SENTRY_PROJECT: $SENTRY_PROJECT
                ENVIRONMENT: 'staging'

      - step:
          name: Deploy to Staging
          deployment: Staging
          script:
            # Install Python
            - apt update -y
            - sudo apt install -y python3-pip
            # Create and push Docker image
            - echo ${DOCKER_PASSWORD} | docker login ghcr.io --username "$DOCKER_USERNAME" --password-stdin
            - IMAGE_NAME=$BITBUCKET_REPO_SLUG
            - docker load --input "${IMAGE_NAME}.tar"
            - ENVIRONMENT="staging"
            - VERSION=$(echo $BITBUCKET_COMMIT | cut -c1-7)
            - IMAGE=ghcr.io/${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}
            - docker tag "${IMAGE_NAME}" "${IMAGE}:${ENVIRONMENT}"
            - docker tag "${IMAGE_NAME}" "${IMAGE}:${VERSION}"
            - docker push "${IMAGE}:${ENVIRONMENT}"
            - docker push "${IMAGE}:${VERSION}"
            # Call Ansible
            - ./.bitbucket/tower.bash staging "$VERSION"

          services:
            - docker

  branches:
    master:
      - step:
          name: Build and Test
          script:
            - IMAGE_NAME=$BITBUCKET_REPO_SLUG
            - docker build . --file Dockerfile --tag ${IMAGE_NAME}
            - docker save ${IMAGE_NAME} --output "${IMAGE_NAME}.tar"
          services:
            - docker
          caches:
            - docker
          artifacts:
            - "*.tar"

      - step:
          script:
            - VERSION=$(echo $BITBUCKET_COMMIT | cut -c1-7)
            - IMAGE=ghcr.io/${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}
            - pipe: anchore/anchore-scan:0.2.14
              variables:
                IMAGE_NAME: "${IMAGE}:${VERSION}"

      - step:
          name: Create Sentry release
          script:
            - pipe: holores/sentry-new-release:0.4.0
              variables:
                SENTRY_AUTH_TOKEN: $SENTRY_TOKEN
                SENTRY_ORG: $SENTRY_ORG
                SENTRY_URL: $SENTRY_URL
                SENTRY_PROJECT: $SENTRY_PROJECT
                ENVIRONMENT: 'production'

      - step:
          name: Deploy to Production
          deployment: Production
          script:
            # Install Python
            - apt update -y
            - sudo apt install -y python3-pip
            # Create and push Docker image
            - echo ${DOCKER_PASSWORD} | docker login ghcr.io --username "$DOCKER_USERNAME" --password-stdin
            - IMAGE_NAME=$BITBUCKET_REPO_SLUG
            - docker load --input "${IMAGE_NAME}.tar"
            - ENVIRONMENT="prod"
            - VERSION=$(echo $BITBUCKET_COMMIT | cut -c1-7)
            - IMAGE=ghcr.io/${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}
            - docker tag "${IMAGE_NAME}" "${IMAGE}:${ENVIRONMENT}"
            - docker tag "${IMAGE_NAME}" "${IMAGE}:${VERSION}"
            - docker push "${IMAGE}:${ENVIRONMENT}"
            - docker push "${IMAGE}:${VERSION}"
            # Call Ansible
            - ./.bitbucket/tower.bash production "$VERSION"

          services:
            - docker

definitions:
  caches:
    pnpm: ~/.pnpm-store
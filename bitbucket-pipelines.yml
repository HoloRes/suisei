image: node:16-buster

definitions:
  steps:
    - step: &mirror
        clone:
          enabled: false
        name: Mirror to GitHub
        script:
          - umask 000
          - GIT_LFS_SKIP_SMUDGE=1 git clone --mirror https://x-token-auth:$REPOSITORY_OAUTH_ACCESS_TOKEN@bitbucket.org/$BITBUCKET_REPO_FULL_NAME.git repo
          - cd repo
          - git config user.name bitbucket-pipelines
          - git config user.email commits-noreply@bitbucket.org
          - git config push.default current
          - git config http.${BITBUCKET_GIT_HTTP_ORIGIN}.proxy http://localhost:29418/
          - git remote set-url origin http://bitbucket.org/$BITBUCKET_REPO_FULL_NAME
          - git reflog expire --expire=all --all
          #- echo ".bitbucket/pipelines/generated" >> .git/info/exclude
          #- chmod 777 repo
          - git push --mirror git@github.com:HoloRes/suisei-bot.git

    - step: &lint
        name: Code linting
        script:
          - npm install
          - npm run lint:ci
        caches:
          - node

    - step: &lintDockerfile
        name: Lint the Dockerfile
        image: hadolint/hadolint:latest-debian
        script:
          - hadolint Dockerfile

    - step: &snyk
        name: Scan using Snyk
        script:
          - npm install -g snyk # binary download also available
          - npm ci
          - pipe: snyk/snyk-scan:0.4.6
            variables:
              SNYK_TOKEN: $SNYK_TOKEN
              LANGUAGE: "npm"
              CODE_INSIGHTS_RESULTS: "true"
              MONITOR: "true"
              DONT_BREAK_BUILD: "true"
        caches:
          - node

    - step: &build
        name: Build
        script:
          - IMAGE_NAME=$BITBUCKET_REPO_SLUG
          - REPO_URL=$BITBUCKET_GIT_HTTP_ORIGIN
          - docker build . --file Dockerfile --tag ${IMAGE_NAME}
            --label "org.opencontainers.image.url"="${REPO_URL}"
            --label "org.opencontainers.image.source"="${REPO_URL}"
            --label "org.opencontainers.image.title"="${BITBUCKET_REPO_SLUG}"
            --label "org.opencontainers.image.licenses"="MIT"
            --label "org.opencontainers.image.description"="A Discord bot specifically built for VTuber servers"
            --label "org.opencontainers.image.revision"="${BITBUCKET_COMMIT}"
            --label "org.opencontainers.image.version"="${BITBUCKET_BRANCH}"
          - docker save ${IMAGE_NAME} --output "${IMAGE_NAME}.tar"
        services:
          - docker
        caches:
          - docker
        artifacts:
          - "*.tar"
    
    - step: &publish
        name: Push to GHCR
        script:
          - IMAGE_NAME=$BITBUCKET_REPO_SLUG
          - docker load --input "${IMAGE_NAME}.tar"
          - echo ${DOCKER_PASSWORD} | docker login ghcr.io --username "$DOCKER_USERNAME" --password-stdin
          - VERSION=$(echo $BITBUCKET_COMMIT | cut -c1-7)
          - IMAGE=ghcr.io/${DOCKER_NAMESPACE}/${IMAGE_NAME}
          - docker tag "${IMAGE_NAME}" "${IMAGE}:${VERSION}"
          - docker push "${IMAGE}:${VERSION}"
        services:
          - docker

pipelines:
  default:
    - parallel:
        - step: *mirror
        - step: *lint
        - step: *lintDockerfile
        - step: *snyk
        - step: *build
    - step: *publish

  pull-requests:
    master:
      - parallel:
        - step: *mirror
        - step: *lint
        - step: *lintDockerfile
        - step: *snyk
        - step: *build

      - step: *publish

      - step:
          name: Create Sentry release
          script:
            - pipe: holores/sentry-new-release:0.5.0
              variables:
                SENTRY_AUTH_TOKEN: $SENTRY_TOKEN
                SENTRY_ORG: $SENTRY_ORG
                SENTRY_URL: $SENTRY_URL
                SENTRY_PROJECT: $SENTRY_PROJECT
                ENVIRONMENT: "staging"
          services:
            - docker

  branches:
    master:
      - parallel:
        - step: *mirror
        - step: *lint
        - step: *lintDockerfile
        - step: *snyk
        - step: *build

      - step:
          name: Publish docker tag
          script:
            # Extract package.json version
            - export PACKAGE_VERSION=$(node --eval="process.stdout.write(require('./package.json').version)")
            # Create and push Docker image
            - VERSION=$(echo $BITBUCKET_COMMIT | cut -c1-7)
            - echo ${DOCKER_PASSWORD} | docker login ghcr.io --username "$DOCKER_USERNAME" --password-stdin
            - IMAGE_NAME=$BITBUCKET_REPO_SLUG
            - docker load --input "${IMAGE_NAME}.tar"
            - IMAGE=ghcr.io/${DOCKER_NAMESPACE}/${IMAGE_NAME}
            - docker tag "${IMAGE_NAME}" "${IMAGE}:${PACKAGE_VERSION}"
            - docker tag "${IMAGE_NAME}" "${IMAGE}:${VERSION}"
            - docker push "${IMAGE}:${PACKAGE_VERSION}"
            - docker push "${IMAGE}:${VERSION}"
          services:
            - docker
      
      - step:
          script:
            - VERSION=$(echo $BITBUCKET_COMMIT | cut -c1-7)
            - IMAGE=ghcr.io/${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}
            - pipe: anchore/anchore-scan:0.2.14
              variables:
                IMAGE_NAME: "${IMAGE}:${VERSION}"

      - step:
          name: Create Sentry release
          script:
            - pipe: holores/sentry-new-release:0.5.0
              variables:
                SENTRY_AUTH_TOKEN: $SENTRY_TOKEN
                SENTRY_ORG: $SENTRY_ORG
                SENTRY_URL: $SENTRY_URL
                SENTRY_PROJECT: $SENTRY_PROJECT
                ENVIRONMENT: "production"
